{"version":3,"sources":["components/Move/MoveList.js","components/Move/MoveCard.js","components/Move/MovieGenres.js","App.js","serviceWorker.js","index.js"],"names":["MoveList","state","editing","pname","send","e","test","_this","props","setState","movies","this","console","log","react_default","a","createElement","className","react","src","poster","alt","onClick","Move_MoveCard","title","genres","map","genre","index","Move_MovieGenres","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","MoveCard","_ref","MovieGenres","App","_renderMovies","movie","Move_MoveList","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","stop","fetch","then","Response","json","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SA+DeA,mNAxDXC,MAAQ,CACJC,SAAS,EACTC,MAAM,MAGVC,KAAO,SAACC,GACL,IAAMC,EAAQC,EAAKC,MACXN,EAAYK,EAAKN,MAAjBC,QACRK,EAAKE,SAAS,CACZN,MAAQG,EACRJ,SAAUA,6EAKX,IAAMQ,EAASC,KAAKH,MACZN,EAAYS,KAAKV,MAAjBC,QAER,OADAU,QAAQC,IAAIX,GAEZY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEVf,EACGY,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKG,IAAKT,EAAOU,OAAQC,IAAKX,EAAOU,OAAQE,QAASX,KAAKP,SAInEU,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBK,QAASX,KAAKP,MACxCU,EAAAC,EAAAC,cAACO,EAAD,CAAUH,OAAQV,EAAOU,UAE9BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKN,EAAOc,OACZV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVP,EAAOe,OAAOC,IAAI,SAACC,EAAOC,GAAR,OAAkBd,EAAAC,EAAAC,cAACa,EAAD,CAAaF,MAAOA,EAAOG,IAAKF,OAEzEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACIiB,KAAMtB,EAAOuB,SACbC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,uBA7CjBC,cCQRC,EAVE,SAAAC,GAAc,IAAZpB,EAAYoB,EAAZpB,OAEf,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,EAAQC,IAAKD,EAASH,UAAU,oBCGvCwB,EARK,SAAAD,GAAa,IAAXb,EAAWa,EAAXb,MAClB,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBU,KCkD7Be,6MAjDbzC,MAAQ,KAOR0C,cAAgB,WAYd,OAXepC,EAAKN,MAAMS,OAAOgB,IAAI,SAAAkB,GACnC,OACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CACErB,MAAOoB,EAAME,cACb1B,OAAQwB,EAAMG,kBACdjB,IAAKc,EAAMI,GACXvB,OAAQmB,EAAMnB,OACdQ,SAAUW,EAAMX,gBAQxBgB,gCAAa,SAAAC,IAAA,IAAAxC,EAAA,OAAAyC,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUhD,EAAKiD,WADf,OACL9C,EADK2C,EAAAI,KAEXlD,EAAKE,SAAS,CACZC,WAHS,wBAAA2C,EAAAK,SAAAR,QAObM,SAAU,WACR,OAAOG,MACL,iEAEDC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrD,SACvBsD,MAAM,SAAAC,GAAG,OAAGrD,QAAQC,IAAIoD,yFAjCzBtD,KAAKsC,8CAoCE,IACKvC,EAAWC,KAAKV,MAAhBS,OACR,OACII,EAAAC,EAAAC,cAAA,WACMN,EAASC,KAAKgC,gBAAkB,kBA7ChCL,aCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.c1370f6b.chunk.js","sourcesContent":["import React, { Component , Fragment} from 'react';\r\nimport {MoveCard , MovieGenres} from '../'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nclass MoveList extends Component {\r\n  \r\n    state = {\r\n        editing: false,\r\n        pname:\"\"\r\n    }\r\n  \r\n    send = (e) => {\r\n       const test =  this.props;\r\n       const { editing } = this.state;\r\n       this.setState({\r\n         pname : test,\r\n         editing: !editing\r\n        });\r\n       \r\n    }\r\n    render() {\r\n        const movies = this.props;\r\n        const { editing } = this.state;\r\n        console.log(editing);\r\n        return (\r\n        <div className=\"Movie\">\r\n\r\n            {editing ? (\r\n                <Fragment>\r\n                    <div className=\"BigMovie\">\r\n                        <img src={movies.poster} alt={movies.poster} onClick={this.send}/>\r\n                    </div>\r\n                </Fragment>\r\n                ) : (\r\n                <Fragment>\r\n                    <div className=\"Movie__Column\" onClick={this.send}>\r\n                         <MoveCard poster={movies.poster}  />\r\n                    </div>  \r\n                    <div className=\"Movie__Column\">\r\n                        <h1>{movies.title}</h1>\r\n                        <div className=\"Movie__Genres\">\r\n                            {movies.genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\r\n                        </div>\r\n                        <div className=\"Movie__Synopsis\">\r\n                            <LinesEllipsis\r\n                                text={movies.synopsis}\r\n                                maxLine='3'\r\n                                ellipsis='...'\r\n                                trimRight\r\n                                basedOn='letters'\r\n                                />   \r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n                )}\r\n\r\n                     \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoveList;","import React from 'react';\r\nimport './Movie.css';\r\n\r\nconst MoveCard = ({poster}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={poster} alt={poster}  className=\"Movie__Poster\"/>\r\n          \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoveCard;","import React from 'react';\r\nimport './Movie.css';\r\nconst MovieGenres = ({genre}) => {\r\n    return (\r\n        <div>\r\n            <span className=\"Movie__Genre\">{genre}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieGenres;","import React, { Component } from 'react';\nimport './App.css';\nimport {MoveList} from './components'\n\nclass App extends Component {\n  \n  state = {};\n  \n  componentDidMount() {\n    this._getMovies();\n  }\n  \n  \n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <MoveList\n          title={movie.title_english}\n          poster={movie.large_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi =() => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n    .then(Response =>Response.json())\n    .then(json => json.data.movies)\n    .catch(err =>console.log(err));\n  }\n  \n  render() {\n        const { movies } = this.state;\n        return (\n            <div>\n                 {movies ? this._renderMovies() : \"Loading\"}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}